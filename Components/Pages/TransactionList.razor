@page "/transactionlist"
@using MoneyMap.Services.Interface
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1 class="centered">All Transactions</h1>

<div class="transaction-list-container">
    <div class="filter-options">
        <input type="text" placeholder="Search by title or tags" @bind="SearchQuery" />
        <input type="date" @bind="StartDate" />
        <select class="filter-dropdown" @bind="TransactionTypeFilter">
            <option value="">All</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
            <option value="Debt">Debt</option>
        </select>
        <button class="filter-button" @onclick="FilterTransactions">Apply Filter</button>
    </div>

    <table class="transaction-table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Tags</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (FilteredTransactions != null && FilteredTransactions.Any())
            {
                @foreach (var transaction in FilteredTransactions)
                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td class="amount @(transaction.TransactionType == "Credit" ? "credit" : "debit")">
                            Rs. @transaction.Amount
                        </td>
                        <td>@transaction.TransactionType</td>
                        <td>
                            @foreach (var tag in transaction.Tags)
                            {
                                <span class="tag">@tag</span>
                            }
                        </td>
                        <td>@transaction.Date.ToString("dd MMMM yyyy")</td>
                        <td>
                            <button class="download-button" @onclick="() => DownloadTransaction(transaction)">Download</button>
                            <button class="delete-button" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" style="text-align: center;">No Transactions Found</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="action-buttons">
    <div class="left-buttons">
        <button class="navigate-button" @onclick="NavigateToInflow">Inflow Transactions</button>
        <button class="navigate-button" @onclick="NavigateToOutflow">Outflow Transactions</button>
    </div>
    <button class="navigate-button add-transaction" @onclick="NavigateToAddTransaction">Add New Transaction</button>
</div>

<div class="balance-box">
    <h2>Current User Balance</h2>
    <p class="balance-text">Rs. @UserBalance</p> <!-- Updated text size for balance -->
</div>

<style>
    .transaction-list-container {
        margin: 20px;
    }

    h1.centered {
        text-align: center;
        margin-bottom: 30px;
    }

    .filter-options {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

        .filter-options input,
        .filter-options select,
        .filter-options button {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 14px;
        }

    .filter-button {
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
    }

        .filter-button:hover {
            background-color: #0056b3;
        }

    .transaction-table {
        width: 100%;
        border-collapse: collapse;
    }

        .transaction-table th,
        .transaction-table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ccc;
        }

        .transaction-table th {
            background-color: #f8f9fa;
        }

    .amount.credit {
        color: green;
        font-weight: bold;
    }

    .amount.debit {
        color: red;
        font-weight: bold;
    }

    .tag {
        display: inline-block;
        background-color: #e9ecef;
        color: #495057;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        margin: 2px;
    }

    .download-button,
    .delete-button {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

    .download-button {
        background-color: #28a745;
        color: white;
    }

        .download-button:hover {
            background-color: #218838;
        }

    .delete-button {
        background-color: #dc3545;
        color: white;
    }

        .delete-button:hover {
            background-color: #c82333;
        }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .navigate-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
        font-size: 14px;
    }

        .navigate-button:hover {
            background-color: #0056b3;
        }

    .add-transaction {
        background-color: #17a2b8;
    }

        .add-transaction:hover {
            background-color: #138496;
        }

    .balance-box {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

        .balance-box h2 {
            margin-bottom: 10px;
        }

    .balance-text {
        font-size: 24px; /* Increased text size */
        font-weight: bold;
        color: #495057;
    }
</style>

@code {
    private List<TransactionModel> AllTransactions = new();
    private List<TransactionModel> FilteredTransactions = new();
    private decimal UserBalance = 0m;
    private string SearchQuery = string.Empty;
    private string TransactionTypeFilter = string.Empty;
    private DateTime? StartDate = null;
    private DateTime? EndDate = null;

    protected override async Task OnInitializedAsync()
    {
        AllTransactions = await TransactionService.GetAllTransactionsAsync();
        FilteredTransactions = AllTransactions;
        CalculateBalance();
    }

    private void FilterTransactions()
    {
        FilteredTransactions = AllTransactions
            .Where(transaction =>
                (string.IsNullOrEmpty(SearchQuery) ||
                 transaction.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                 transaction.Tags.Any(tag => tag.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
                && (string.IsNullOrEmpty(TransactionTypeFilter) || transaction.TransactionType == TransactionTypeFilter)
                && (!StartDate.HasValue || transaction.Date >= StartDate)
                && (!EndDate.HasValue || transaction.Date <= EndDate))
            .ToList();
    }

    private async Task DeleteTransaction(TransactionModel transaction)
    {
        await TransactionService.DeleteTransactionAsync(transaction);
        AllTransactions.Remove(transaction);
        FilterTransactions();
        CalculateBalance();
    }

    private void NavigateToAddTransaction()
    {
        NavigationManager.NavigateTo("/transaction");
    }

    private void NavigateToInflow()
    {
        NavigationManager.NavigateTo("/inflow");
    }

    private void NavigateToOutflow()
    {
        NavigationManager.NavigateTo("/outflow");
    }

    private void CalculateBalance()
    {
        var inflow = AllTransactions.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount);
        var outflow = AllTransactions.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount);
        UserBalance = inflow - outflow;
    }

    private async Task DownloadTransaction(TransactionModel transaction)
    {
        var csvContent = $"Title,Amount,Type,Tags,Date,Notes\n" +
                         $"{transaction.Title},{transaction.Amount},{transaction.TransactionType}," +
                         $"{string.Join(";", transaction.Tags)},{transaction.Date:yyyy-MM-dd},{transaction.Notes}";

        await JSRuntime.InvokeVoidAsync("downloadFile", $"{transaction.Title.Replace(" ", "_")}.csv", csvContent);
    }
}
